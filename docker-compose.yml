version: '3.8'

services:
  mongodb:
    image: mongo:8
    container_name: mongodb
    ports:
      - "27017:27017"
#    volumes:
#      - mongo_data:/data/db
#    command: ["--replSet", "rs0", "--bind_ip_all"]
    command: >
      bash -c '
        mongod --replSet rs0 --bind_ip_all &
        until mongosh --quiet --eval "
          try {
            rs.status().ok;
          } catch (e) {
            rs.initiate({
              _id: \"rs0\",
              members: [{ _id: 0, host: \"host.docker.internal:27017\" }]
            });
          }
        "; do
          echo "Waiting for MongoDB to initialize replica set..."
          sleep 2
        done
        wait
      '
#    networks:
#      - internal
#      - default

  gateway:
    build: ./GatewayServer
    container_name: gateway
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - auth
      - event
#    networks:
#      - internal
#      - default
    environment:
      - ENV NODE_ENV=production
      - JWT_SECRET=my_jwt_secret
      - JWT_VERSION=1
      - AUTH_SERVER_HOST=http://host.docker.internal:3001
      - EVENT_SERVER_HOST=http://host.docker.internal:3002
      - PORT=3000
    links:
      - auth
      - event

  auth:
    build: ./AuthServer
    container_name: auth
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
#    networks:
#      - internal
#      - default
    environment:
      - NODE_ENV=production
      - JWT_SECRET=my_jwt_secret
      - JWT_EXPIRES_IN=1d
      - JWT_VERSION=1
      - MONGO_URI=mongodb://host.docker.internal:27017
      - MONGO_DATABASE_NAME=auth_db
      - PORT=3001
    links:
      - mongodb

  event:
    build: ./EventServer
    container_name: event
    ports:
      - "3002:3002"
    depends_on:
      - mongodb
#    networks:
#      - internal
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://host.docker.internal:27017
      - MONGO_DATABASE_NAME=event_db
      - PORT=3002
    links:
      - mongodb

#volumes:
#  mongo_data:

#networks:
#  internal:
#    driver: bridge

# docker.host.internal
